import pandas as pd
from math import sqrt;
from sklearn import preprocessing
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score#, r2_score, confusion_matrix, mean_absolute_error, mean_squared_error, f1_score, log_loss
# from sklearn.model_selection import train_test_split
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import joblib


###### WARNING: The code is completely messed up, the reason is that when I try to mrge the sample_benign_flows and benign_flows for some
# missing columns, somehow the pd misunderstand the "1" and "0001" - no idea why
# you should have a look at the header of benign_flows and sample_benign_flows for more detail :))
# I am just really tired and lazy for this (I am sorry)
# Sumarize: dont use this, if you want to test the scoring , the training.py is already enough

# Fak this shiet, I'm out

def concatdataset(malicious, benign):
    if malicious == "" and benign == "":
        print("Provide at least 1 valid filename")
        exit(0)


    if malicious != "":
        mal = pd.read_csv(malicious)

    if benign != "":
        ben = pd.read_csv(benign)

    if malicious == "":
        validate_data = ben 
    elif benign == "":
        validate_data = mal 
    else:
        validate_data = pd.concat([ben, mal], ignore_index=True)
    
    validate_data = validate_data.sample(frac = 1).reset_index(drop = True)

    print(validate_data.columns)
    #there is some problem about the dataset (the author's only accept .json that have support group and ec format, which is not really true 
    # for other .json file  - malware for example, so I decide to merge 2 dataset, 1 from sample and the other from mine)

    #Comment: author's code sucks
    lmao = "Src_Port,Dst_Port,Bytes_in,Bytes_out,Pkts_in,Pkts_out,entropy,byte_dist_std,byte_dist_mn,num_of_exts,0,1,2,3,4,5,6,7,8,9,000a,000b,000c,000d,000e,000f,10,11,12,13,14,15,16,17,18,19,001A,001B,001E,001F,20,21,22,23,24,25,26,27,28,29,002a,002b,002c,002d,002e,002f,30,31,32,33,35,36,37,38,39,003a,003b,003c,003d,003e,003f,40,41,42,43,44,45,46,67,68,69,006a,006b,006c,006d,84,85,86,87,88,89,008a,008b,008c,008d,008e,008f,90,91,92,93,94,95,96,97,98,99,009a,009b,009c,009d,009e,009f,00a0,00a1,00a2,00a3,00a4,00a5,00a6,00a7,00a8,00a9,00aa,00ab,00ac,00ad,00ae,00af,00b0,00b1,00b2,00b3,00b4,00b5,00b6,00b7,00b8,00b9,00ba,00bb,00bc,00bd,00be,00bf,00c0,00c1,00c2,00c3,00c4,00c5,00c6,00c7,00ff,1301,1302,1303,1304,1305,5600,c001,c002,c003,c004,c005,c006,c007,c008,c009,c00a,c00b,c00c,c00d,c00e,c00f,c010,c011,c012,c013,c014,c015,c016,c017,c018,c019,c01a,c01b,c01c,c01d,c01e,c01f,c020,c021,c022,c023,c024,c025,c026,c027,c028,c029,c02a,c02b,c02c,c02d,c02e,c02f,c030,c031,c032,c033,c034,c035,c036,c037,c038,c039,c03a,c03b,c03c,c03d,c03e,c03f,c040,c041,c042,c043,c044,c045,c046,c047,c048,c049,c04a,c04b,c04c,c04d,c04e,c04f,c050,c051,c052,c053,c054,c055,c056,c057,c058,c059,c05a,c05b,c05c,c05d,c05e,c05f,c060,c061,c062,c063,c064,c065,c066,c067,c068,c069,c06a,c06b,c06c,c06d,c06e,c06f,c070,c071,c072,c073,c074,c075,c076,c077,c078,c079,c07a,c07b,c07c,c07d,c07e,c07f,c080,c081,c082,c083,c084,c085,c086,c087,c088,c089,c08a,c08b,c08c,c08d,c08e,c08f,c090,c091,c092,c093,c094,c095,c096,c097,c098,c099,c09a,c09b,c09c,c09d,c09e,c09f,c0a0,c0a1,c0a2,c0a3,c0a4,c0a5,c0a6,c0a7,c0a8,c0a9,c0aa,c0ab,c0ac,c0ad,c0ae,c0af,c0b0,c0b1,c0b2,c0b3,c0b4,c0b5,c100,c101,c102,c103,c104,c105,c106,cca8,cca9,ccaa,ccab,ccad,ccae,d001,d002,d003,d005,ext_1,ext_2,ext_3,ext_4,ext_5,ext_6,ext_7,ext_8,ext_9,ext_10,ext_11,ext_12,ext_13,ext_14,ext_15,ext_16,ext_17,ext_18,ext_19,ext_20,ext_21,ext_22,ext_23,ext_24,ext_25,ext_26,ext_27,ext_28,ext_29,ext_30,ext_31,ext_32,ext_33,ext_34,ext_35,ext_36,ext_37,ext_38,ext_39,ext_40,ext_41,ext_42,ext_43,ext_44,ext_45,ext_46,ext_47,ext_48,ext_49,ext_50,ext_51,ext_52,sg_0,sg_1,sg_2,sg_3,sg_4,sg_5,sg_6,sg_7,sg_8,sg_9,sg_10,sg_11,sg_12,sg_13,sg_14,sg_15,sg_16,sg_17,sg_18,sg_19,sg_20,sg_21,sg_22,sg_23,sg_24,sg_25,ec_pts_0,ec_pts_1,isMalware"
    lmao = lmao.split(",")
    lmao2 = "Src_Port,Dst_Port,Bytes_in,Bytes_out,Pkts_in,Pkts_out,entropy,byte_dist_std,byte_dist_mn,num_of_exts,0000,0001,0002,0003,0004,0005,0006,0007,0008,0009,000a,000b,000c,000d,000e,000f,0010,0011,0012,0013,0014,0015,0016,0017,0018,0019,001A,001B,001E,001F,0020,0021,0022,0023,0024,0025,0026,0027,0028,0029,002a,002b,002c,002d,002e,002f,0030,0031,0032,0033,0035,0036,0037,0038,0039,003a,003b,003c,003d,003e,003f,0040,0041,0042,0043,0044,0045,0046,0067,0068,0069,006a,006b,006c,006d,0084,0085,0086,0087,0088,0089,008a,008b,008c,008d,008e,008f,0090,0091,0092,0093,0094,0095,0096,0097,0098,0099,009a,009b,009c,009d,009e,009f,00a0,00a1,00a2,00a3,00a4,00a5,00a6,00a7,00a8,00a9,00aa,00ab,00ac,00ad,00ae,00af,00b0,00b1,00b2,00b3,00b4,00b5,00b6,00b7,00b8,00b9,00ba,00bb,00bc,00bd,00be,00bf,00c0,00c1,00c2,00c3,00c4,00c5,00c6,00c7,00ff,1301,1302,1303,1304,1305,5600,c001,c002,c003,c004,c005,c006,c007,c008,c009,c00a,c00b,c00c,c00d,c00e,c00f,c010,c011,c012,c013,c014,c015,c016,c017,c018,c019,c01a,c01b,c01c,c01d,c01e,c01f,c020,c021,c022,c023,c024,c025,c026,c027,c028,c029,c02a,c02b,c02c,c02d,c02e,c02f,c030,c031,c032,c033,c034,c035,c036,c037,c038,c039,c03a,c03b,c03c,c03d,c03e,c03f,c040,c041,c042,c043,c044,c045,c046,c047,c048,c049,c04a,c04b,c04c,c04d,c04e,c04f,c050,c051,c052,c053,c054,c055,c056,c057,c058,c059,c05a,c05b,c05c,c05d,c05e,c05f,c060,c061,c062,c063,c064,c065,c066,c067,c068,c069,c06a,c06b,c06c,c06d,c06e,c06f,c070,c071,c072,c073,c074,c075,c076,c077,c078,c079,c07a,c07b,c07c,c07d,c07e,c07f,c080,c081,c082,c083,c084,c085,c086,c087,c088,c089,c08a,c08b,c08c,c08d,c08e,c08f,c090,c091,c092,c093,c094,c095,c096,c097,c098,c099,c09a,c09b,c09c,c09d,c09e,c09f,c0a0,c0a1,c0a2,c0a3,c0a4,c0a5,c0a6,c0a7,c0a8,c0a9,c0aa,c0ab,c0ac,c0ad,c0ae,c0af,c0b0,c0b1,c0b2,c0b3,c0b4,c0b5,c100,c101,c102,c103,c104,c105,c106,cca8,cca9,ccaa,ccab,ccad,ccae,d001,d002,d003,d005,ext_1,ext_2,ext_3,ext_4,ext_5,ext_6,ext_7,ext_8,ext_9,ext_10,ext_11,ext_12,ext_13,ext_14,ext_15,ext_16,ext_17,ext_18,ext_19,ext_20,ext_21,ext_22,ext_23,ext_24,ext_25,ext_26,ext_27,ext_28,ext_29,ext_30,ext_31,ext_32,ext_33,ext_34,ext_35,ext_36,ext_37,ext_38,ext_39,ext_40,ext_41,ext_42,ext_43,ext_44,ext_45,ext_46,ext_47,ext_48,ext_49,ext_50,ext_51,ext_52,isMalware"
    lmao2 = lmao2.split(",")

    lmao_final = lmao2[:410] + lmao[410:] #man, the author code is really bad, its completely not synchronize, I have to adjust it
    #I hate this

    ok = pd.read_csv("./sample_benign_flows.csv")
    ok = ok.sample(frac = 0.1)

    # ok.columns = lmao_final
    # print(ok.columns.tolist())
    common_columns = ok.columns.intersection(validate_data.columns)

    # print(common_columns)
    merge_df = pd.merge(ok, validate_data, on=common_columns.tolist(), how='left')
    validate_data = merge_df
    validate_data.fillna(0, inplace = True)
    # print(validate_data.columns.tolist())

    validate_data = validate_data[ok.columns]
    
    # print(lmao)
    validate_data.columns = lmao_final

    validate_y = validate_data["isMalware"]
    validate_x = validate_data.drop(["isMalware"], axis= 1)
    return validate_x, validate_y




model = joblib.load("RandomForestClassifier.joblib")


malicious = "./test_data/malicious_flows.csv" #replace this
benign = "./test_data/benign_flows.csv" #replace this


x_test , y_test = concatdataset(malicious, benign)

# print(x_test.columns)






y_pred = model.predict(x_test)

print('Random Forest Classifier Accuracy score: ', accuracy_score(y_test, y_pred))

exit(0)